set nocompatible " enter the current millenium
filetype off     " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'RRethy/vim-illuminate'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'airblade/vim-gitgutter'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'diepm/vim-rest-console'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'farmergreg/vim-lastplace'
Plugin 'haya14busa/incsearch.vim'
Plugin 'honza/vim-snippets'
Plugin 'jiangmiao/auto-pairs'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'kien/ctrlp.vim'
Plugin 'lilydjwg/colorizer'
Plugin 'majutsushi/tagbar'
Plugin 'mannih/vim-perl-variable-highlighter'
Plugin 'morhetz/gruvbox'
Plugin 'osfameron/perl-tags'
Plugin 'rsrchboy/mojo.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
"Plugin 'SirVer/ultisnips'
Plugin 'skaji/syntax-check-perl'
Plugin 'stephpy/vim-yaml'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-perl/vim-perl'
Plugin 'w0rp/ale'
" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " required

let mapleader = ","

" enable syntax
syntax enable

set autochdir                   " Set the working directory to wherever the open file lives
set autoindent                  " copy indent from current line
set autoread                    " read open files again when changed outside Vim
set autowrite                   " write a modified buffer on each :next , ...
set backspace=indent,eol,start  " backspacing over everything in insert mode
set binary                      " encoding
set bomb                        " encoding
set browsedir=current           " which directory to use for the file browser
set cindent
set complete+=k                 " scan the files given with the 'dictionary' option
"set cursorcolumn                " highlight column where cursor is
"set cursorline                  " highlight line where cursor is
set encoding=utf-8              " encoding
set expandtab                   " tabs
set fileformats=unix,dos,mac    " file formats
set fileencoding=utf-8          " encoding
set fileencodings=utf-8         " encoding
set hidden                      " enable hidden buffers
set history=50                  " keep 50 lines of command line history
set hlsearch                    " highlightthe last used search pattern
set ignorecase                  " ignore case
set incsearch                   " do incremental searching
set laststatus=2                " set statusline to appear all the time
set modeline                    " use modeline overrides
set modelines=10                " use moduline overrides
set mouse=a                     " enable the use of the mouse
set mousemodel=popup
set nowrap                      " do not wrap lines
set number                      " display line numbers
set pastetoggle=<F2>            " do not autoindent when pasting
set path+=**                    " work on directories recursively
set numberwidth=4
set path+=**                    " Search down into subfolders
set popt=left:8pc,right:3pc     " print options
set ruler                       " show the cursor position all the time
set sessionoptions-=options
set shell=/bin/bash             " shell preference
set shiftwidth=4                " number of spaces to use for each step of indent
set showcmd                     " display incomplete commands
set showmatch                   " show the matching part of the pair for [] {} and ()
set showmode                    " show current working mode
set smartcase                   " searching
set smartindent                 " smart autoindenting when starting a new line
set smarttab                    " tabs
set softtabstop=4               " tabs
set splitbelow                  " split below when horizontal
set splitright                  " split to the right when vertical
set tabstop=4                   " number of spaces that a <Tab> counts for
set title
set titleold="Terminal"
set titlestring=%F
set ttyfast                     " encoding
set visualbell                  " visual bell instead of beeping
set wildignore=*.bak,*.o,*.e,*~ " wildmenu: ignore these extensions
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd,*.pyc
set wildignore+=node_modules/*,bower_components/*
set wildmenu                    " Display all matching files when we tab complete

set t_Co=256
colorscheme gruvbox
set background=dark

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" . scan the current buffer, b scan other loaded buffers that are in the buffer list, u scan the unloaded buffers that
" are in the buffer list, w scan buffers from other windows, t tag completion
set complete=.,b,u,w,t,]
set completeopt=menu,preview

" Keyword list
set complete+=k~/.vim/keywords.txt

" enable all Python syntax highlighting features
let python_highlight_all = 1

" NERDTree configuration
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
map <Leader>n :NERDTreeToggle<CR>

" Ack configuration
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

" Flake8 configuration
autocmd FileType python map <buffer> <Leader>8 :call Flake8()<CR>

" Toggle line numbering
map <Leader>l :set nu!<CR>

" Toggle Tagbar
map <Leader>t :TagbarToggle<CR>

" Signify configuration
let g:signify_vcs_list = ['git','hg']

" buftabline configuration
"nnoremap <C-N> :bnext<CR>
"nnoremap <C-P> :bprev<CR>

map <Leader>bn :bnext<CR>
map <Leader>bp :bprev<CR>

" NERDcommenter configuration
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" CtrlP configuration
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

" Change vim settings based on filetype
autocmd Filetype html,ruby,php,yaml setlocal ts=2 sw=2 expandtab
autocmd Filetype perl,javascript setlocal ts=4 sw=4 expandtab

" Use space to jump down a page (like browsers do)...
nnoremap   <Space> <PageDown>
vnoremap   <Space> <PageDown>

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
"
" Index ctags from any project, including those outside Rails
function! ReindexCtags()
    let l:ctags_hook = '$(git rev-parse --show-toplevel)/.git/hooks/ctags'
    if exists(l:ctags_hook)
        exec '!'. l:ctags_hook
    else
        exec "!ctags -R ."
    endif
endfunction
nmap <Leader>ct :call ReindexCtags()<CR>

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

"define :Tidy command to run perltidy on visual selection || entire buffer"
command -range=% -nargs=* Tidy <line1>,<line2>!perltidy -pro=/home/dkl/devel/repos/github/mozilla/conduit/bmo/.perltidyrc

"run :Tidy on entire buffer and return cursor to (approximate) original position"
fun DoTidy()
    let l = line(".")
    let c = col(".")
    :Tidy
    call cursor(l, c)
endfun

"shortcut for normal mode to run on entire buffer then return to current line"
au Filetype perl nmap <F2> :call DoTidy()<CR>

"shortcut for visual mode to run on the the current visual selection"
au Filetype perl vmap <F2> :Tidy<CR>

" Proper syntax for template toolkit (tt2) files
autocmd BufNewFile,BufRead *.tmpl set ft=tt2

" vim-lastplace
let g:lastplace_ignore = "gitcommit,gitrebase,svn,hgcommit"
let g:lastplace_ignore_buftype = "quickfix,nofile,help"

" Ale settings
let g:ale_linters_explicit = 1
let g:ale_perl_perl_options = '-c -Mwarnings -I. -Ilib'
let g:ale_type_map = {'perlcritic': {'ES': 'WS', 'E': 'W'}}
let g:ale_linters = {'perl': ['perlcritic']}
let g:ale_perl_perlcritic_showrules = 1

" Treat Mojo templates (mostly) like HTML
autocmd FileType html.epl setlocal sw=2 ts=2 sts=2
autocmd FileType html.ep setlocal sw=2 ts=2 sts=2"

" VRC Rest Client
let g:vrc_curl_opts = {
  \ '--connect-timeout' : 10,
  \ '-L': '',
  \ '-i': '',
  \ '--max-time': 60,
  \ '--ipv4': '',
  \ '-k': '',
  \ '-x': '172.20.0.1:1080'
\}

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Leader>u"
let g:UltiSnipsJumpForwardTrigger="<C-b>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:netrw_banner=0
let g:netrw_winsize=20
let g:netrw_liststyle=3
let g:netrw_localrmdir='rm -r'

"toggle netrw on the left side of the editor
"nnoremap <leader>n :Lexplore<CR>
